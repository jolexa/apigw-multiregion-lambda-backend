AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Ping Function and Pong Endpoint

Parameters:
  DomainName:
    Type: String
  PrimaryUrl:
    Type: String
  StandbyUrl:
    Type: String
  TransitionalUrl:
    Type: String
  Bucket:
    Type: String
  md5:
    Type: String
  OtherInfraStackName:
    Type: String
  OtherPingPongStackName:
    Type: String
  MyInfraStackName:
    Type: String
  OtherStackRegion:
    Type: String

Outputs:
  AlarmSNSArn:
    Value: !Ref AlarmSNS
    Export:
      Name: apigw-multiregion-lambda-backend:AlarmSNSArn
  KickerFunctionArn:
    Value: !GetAtt KickerFunction.Arn
    Export:
      Name: apigw-multiregion-lambda-backend:KickerFunctionArn

Mappings:
  RegionMap:
    us-east-2:
      'cron': 'cron(0/2 * * * ? *)'
    us-west-2:
      'cron': 'cron(1/2 * * * ? *)'

Resources:
  MultiRegionCoolDownTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "text"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "text"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  PongerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: ponger.handler
      Runtime: python3.6
      Timeout: 1
      CodeUri:
        Bucket: !Ref Bucket
        Key: !Ref md5
      Events:
        GetApi:
          Type: Api
          Properties:
            Path: /
            Method: GET

#  OrchestratorStateMachine:
#    Type: AWS::StepFunctions::StateMachine
#    Properties:
#      DefinitionString:
#        !Sub
#          - |-
#            {
#              "Comment": "A Hello World AWL example using an AWS Lambda Function",
#              "StartAt": "FirstState",
#              "States": {
#                "FirstState": {
#                  "Type": "Task",
#                  "Resource": "${lambdaArn}",
#                  "Next": "SecondState"
#                },
#                "SecondState": {
#                  "Type": "Task",
#                  "Resource": "${lambdaArn2}",
#                  "End": true
#                }
#              }
#            }
#          - {lambdaArn: !GetAtt [PongerFunction, Arn], lambdaArn2: !GetAtt [PingerFunction, Arn] }
#      RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/service-role/StatesExecutionRole-${AWS::Region}

  SwapperFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Sid: 'Lambda'
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: "/cfn/"
      Policies:
      - PolicyName: UpdateCFNThings
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
                - 'cloudformation:DescribeStacks'
                - 'cloudformation:GetTemplate'
                - 'cloudformation:UpdateStack'
                - 'lambda:GetFunctionConfiguration'
                - 'route53:ListHostedZones'
                - 'route53:GetChange'
            Resource: '*'
          - Effect: Allow
            Action:
                - 'apigateway:POST'
            Resource:
                - !Sub 'arn:aws:apigateway:${AWS::Region}::/domainnames/${PrimaryUrl}/basepathmappings'
                - !Sub 'arn:aws:apigateway:${OtherStackRegion}::/domainnames/${PrimaryUrl}/basepathmappings'
                - !Sub 'arn:aws:apigateway:${AWS::Region}::/domainnames/${StandbyUrl}/basepathmappings'
                - !Sub 'arn:aws:apigateway:${OtherStackRegion}::/domainnames/${StandbyUrl}/basepathmappings'
                - !Sub 'arn:aws:apigateway:${AWS::Region}::/domainnames/${TransitionalUrl}/basepathmappings'
                - !Sub 'arn:aws:apigateway:${OtherStackRegion}::/domainnames/${TransitionalUrl}/basepathmappings'
          - Effect: Allow
            Action:
                - 'apigateway:DELETE'
            Resource:
                - !Sub 'arn:aws:apigateway:${AWS::Region}::/domainnames/${PrimaryUrl}/basepathmappings/*'
                - !Sub 'arn:aws:apigateway:${OtherStackRegion}::/domainnames/${PrimaryUrl}/basepathmappings/*'
                - !Sub 'arn:aws:apigateway:${AWS::Region}::/domainnames/${StandbyUrl}/basepathmappings/*'
                - !Sub 'arn:aws:apigateway:${OtherStackRegion}::/domainnames/${StandbyUrl}/basepathmappings/*'
                - !Sub 'arn:aws:apigateway:${AWS::Region}::/domainnames/${TransitionalUrl}/basepathmappings/*'
                - !Sub 'arn:aws:apigateway:${OtherStackRegion}::/domainnames/${TransitionalUrl}/basepathmappings/*'
          - Effect: Allow
            Action:
                - 'lambda:InvokeFunction'
            Resource:
                # Too broad, remove wildcard somehow?
                # Just needs permissions to invoke the Custom CFN function in
                # the existing stack
                - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*'
                - !Sub 'arn:aws:lambda:${OtherStackRegion}:${AWS::AccountId}:function:*'
          - Effect: Allow
            Action:
                - 'route53:ChangeResourceRecordSets'
            Resource:
                # Too broad, remove wildcard somehow?
                - 'arn:aws:route53:::hostedzone/*'


  KickerFunction:
    Type: AWS::Serverless::Function
    Properties:
      # I don't like hardcoding names but it is required for cross-region references
      FunctionName: apigw-multiregion-lambda-backend-swap
      Handler: swap.kicker
      Runtime: python3.6
      Timeout: 300
      CodeUri:
        Bucket: !Ref Bucket
        Key: !Ref md5
      Environment:
        Variables:
          OtherInfraStackName: !Ref OtherInfraStackName
          OtherPingPongStackName: !Ref OtherPingPongStackName
          MyInfraStackName: !Ref MyInfraStackName
          MyPingPongStackName: !Sub ${AWS::StackName}
          PrimaryUrl: !Ref PrimaryUrl
          StandbyUrl: !Ref StandbyUrl
          TransitionalUrl: !Ref TransitionalUrl
          OtherStackRegion: !Ref OtherStackRegion
          CoolDownTableName: !Ref MultiRegionCoolDownTable
      Role: !GetAtt SwapperFunctionRole.Arn
  FirstFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: swap.FirstFunction
      Runtime: python3.6
      Timeout: 300
      CodeUri:
        Bucket: !Ref Bucket
        Key: !Ref md5
      Environment:
        Variables:
          OtherInfraStackName: !Ref OtherInfraStackName
          OtherPingPongStackName: !Ref OtherPingPongStackName
          MyInfraStackName: !Ref MyInfraStackName
          MyPingPongStackName: !Sub ${AWS::StackName}
          PrimaryUrl: !Ref PrimaryUrl
          StandbyUrl: !Ref StandbyUrl
          TransitionalUrl: !Ref TransitionalUrl
          OtherStackRegion: !Ref OtherStackRegion
          CoolDownTableName: !Ref MultiRegionCoolDownTable
      Role: !GetAtt SwapperFunctionRole.Arn
  SecondFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: swap.SecondFunction
      Runtime: python3.6
      Timeout: 300
      CodeUri:
        Bucket: !Ref Bucket
        Key: !Ref md5
      Environment:
        Variables:
          OtherInfraStackName: !Ref OtherInfraStackName
          OtherPingPongStackName: !Ref OtherPingPongStackName
          MyInfraStackName: !Ref MyInfraStackName
          MyPingPongStackName: !Sub ${AWS::StackName}
          PrimaryUrl: !Ref PrimaryUrl
          StandbyUrl: !Ref StandbyUrl
          TransitionalUrl: !Ref TransitionalUrl
          OtherStackRegion: !Ref OtherStackRegion
          CoolDownTableName: !Ref MultiRegionCoolDownTable
      Role: !GetAtt SwapperFunctionRole.Arn
  ThirdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: swap.ThirdFunction
      Runtime: python3.6
      Timeout: 300
      CodeUri:
        Bucket: !Ref Bucket
        Key: !Ref md5
      Environment:
        Variables:
          OtherInfraStackName: !Ref OtherInfraStackName
          OtherPingPongStackName: !Ref OtherPingPongStackName
          MyInfraStackName: !Ref MyInfraStackName
          MyPingPongStackName: !Sub ${AWS::StackName}
          PrimaryUrl: !Ref PrimaryUrl
          StandbyUrl: !Ref StandbyUrl
          TransitionalUrl: !Ref TransitionalUrl
          OtherStackRegion: !Ref OtherStackRegion
          CoolDownTableName: !Ref MultiRegionCoolDownTable
      Role: !GetAtt SwapperFunctionRole.Arn
  FourthFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: swap.FourthFunction
      Runtime: python3.6
      Timeout: 300
      CodeUri:
        Bucket: !Ref Bucket
        Key: !Ref md5
      Environment:
        Variables:
          OtherInfraStackName: !Ref OtherInfraStackName
          OtherPingPongStackName: !Ref OtherPingPongStackName
          MyInfraStackName: !Ref MyInfraStackName
          MyPingPongStackName: !Sub ${AWS::StackName}
          PrimaryUrl: !Ref PrimaryUrl
          StandbyUrl: !Ref StandbyUrl
          TransitionalUrl: !Ref TransitionalUrl
          OtherStackRegion: !Ref OtherStackRegion
          CoolDownTableName: !Ref MultiRegionCoolDownTable
      Role: !GetAtt SwapperFunctionRole.Arn
  FifthFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: swap.FifthFunction
      Runtime: python3.6
      Timeout: 300
      CodeUri:
        Bucket: !Ref Bucket
        Key: !Ref md5
      Environment:
        Variables:
          OtherInfraStackName: !Ref OtherInfraStackName
          OtherPingPongStackName: !Ref OtherPingPongStackName
          MyInfraStackName: !Ref MyInfraStackName
          MyPingPongStackName: !Sub ${AWS::StackName}
          PrimaryUrl: !Ref PrimaryUrl
          StandbyUrl: !Ref StandbyUrl
          TransitionalUrl: !Ref TransitionalUrl
          OtherStackRegion: !Ref OtherStackRegion
          CoolDownTableName: !Ref MultiRegionCoolDownTable
      Role: !GetAtt SwapperFunctionRole.Arn
  SixthFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: swap.SixthFunction
      Runtime: python3.6
      Timeout: 300
      CodeUri:
        Bucket: !Ref Bucket
        Key: !Ref md5
      Environment:
        Variables:
          OtherInfraStackName: !Ref OtherInfraStackName
          OtherPingPongStackName: !Ref OtherPingPongStackName
          MyInfraStackName: !Ref MyInfraStackName
          MyPingPongStackName: !Sub ${AWS::StackName}
          PrimaryUrl: !Ref PrimaryUrl
          StandbyUrl: !Ref StandbyUrl
          TransitionalUrl: !Ref TransitionalUrl
          OtherStackRegion: !Ref OtherStackRegion
          CoolDownTableName: !Ref MultiRegionCoolDownTable
      Role: !GetAtt SwapperFunctionRole.Arn
  FirstWait:
    Type: AWS::Serverless::Function
    Properties:
      Handler: swap.FirstWait
      Runtime: python3.6
      Timeout: 300
      CodeUri:
        Bucket: !Ref Bucket
        Key: !Ref md5
      Environment:
        Variables:
          OtherInfraStackName: !Ref OtherInfraStackName
          OtherPingPongStackName: !Ref OtherPingPongStackName
          MyInfraStackName: !Ref MyInfraStackName
          MyPingPongStackName: !Sub ${AWS::StackName}
          PrimaryUrl: !Ref PrimaryUrl
          StandbyUrl: !Ref StandbyUrl
          TransitionalUrl: !Ref TransitionalUrl
          OtherStackRegion: !Ref OtherStackRegion
          CoolDownTableName: !Ref MultiRegionCoolDownTable
      Role: !GetAtt SwapperFunctionRole.Arn
  ThirdWait:
    Type: AWS::Serverless::Function
    Properties:
      Handler: swap.ThirdWait
      Runtime: python3.6
      Timeout: 300
      CodeUri:
        Bucket: !Ref Bucket
        Key: !Ref md5
      Environment:
        Variables:
          OtherInfraStackName: !Ref OtherInfraStackName
          OtherPingPongStackName: !Ref OtherPingPongStackName
          MyInfraStackName: !Ref MyInfraStackName
          MyPingPongStackName: !Sub ${AWS::StackName}
          PrimaryUrl: !Ref PrimaryUrl
          StandbyUrl: !Ref StandbyUrl
          TransitionalUrl: !Ref TransitionalUrl
          OtherStackRegion: !Ref OtherStackRegion
          CoolDownTableName: !Ref MultiRegionCoolDownTable
      Role: !GetAtt SwapperFunctionRole.Arn
  FifthWait:
    Type: AWS::Serverless::Function
    Properties:
      Handler: swap.FifthWait
      Runtime: python3.6
      Timeout: 300
      CodeUri:
        Bucket: !Ref Bucket
        Key: !Ref md5
      Environment:
        Variables:
          OtherInfraStackName: !Ref OtherInfraStackName
          OtherPingPongStackName: !Ref OtherPingPongStackName
          MyInfraStackName: !Ref MyInfraStackName
          MyPingPongStackName: !Sub ${AWS::StackName}
          PrimaryUrl: !Ref PrimaryUrl
          StandbyUrl: !Ref StandbyUrl
          TransitionalUrl: !Ref TransitionalUrl
          OtherStackRegion: !Ref OtherStackRegion
          CoolDownTableName: !Ref MultiRegionCoolDownTable
      Role: !GetAtt SwapperFunctionRole.Arn


  AlarmSNS:
    Type: AWS::SNS::Topic

  PongerFunctionAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmDescription: Checks for number of pong invokes
      AlarmActions: [ !Ref AlarmSNS ]
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref PongerFunction
      EvaluationPeriods: 1
      MetricName: Invocations
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: breaching
      Unit: Count

  PongerPathMapping:
    Type: "AWS::ApiGateway::BasePathMapping"
    Properties:
      BasePath: ting # careful /ping is a reserved endpoint
      DomainName: !Ref DomainName
      RestApiId: !Ref ServerlessRestApi
      Stage: !Ref ServerlessRestApiProdStage # "Prod"

  PingerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: pinger.handler
      Runtime: python3.6
      Timeout: 1
      CodeUri:
        Bucket: !Ref Bucket
        Key: !Ref md5
      Environment:
        Variables:
          PrimaryUrl: !Ref PrimaryUrl
      Events:
        Cron:
          Type: Schedule
          Properties:
              Schedule: !FindInMap [RegionMap, !Ref 'AWS::Region', cron]
