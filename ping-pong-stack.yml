AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Ping Function and Pong Endpoint

Parameters:
  DomainName:
    Type: String
  PrimaryUrl:
    Type: String
  StandbyUrl:
    Type: String
  TransitionalUrl:
    Type: String
  Bucket:
    Type: String
  md5:
    Type: String
  OtherInfraStackName:
    Type: String
  OtherPingPongStackName:
    Type: String
  MyInfraStackName:
    Type: String
  OtherStackRegion:
    Type: String

Outputs:
  AlarmSNSArn:
    Value: !Ref AlarmSNS
    Export:
      Name: apigw-multiregion-lambda-backend:AlarmSNSArn
  SwapperFunctionArn:
    Value: !GetAtt SwapperFunction.Arn
    Export:
      Name: apigw-multiregion-lambda-backend:SwapperFunctionArn

Mappings:
  RegionMap:
    us-east-2:
      'cron': 'cron(0/2 * * * ? *)'
    us-west-2:
      'cron': 'cron(1/2 * * * ? *)'

Resources:
  PongerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: ponger.handler
      Runtime: python3.6
      Timeout: 1
      CodeUri:
        Bucket: !Ref Bucket
        Key: !Ref md5
      Events:
        GetApi:
          Type: Api
          Properties:
            Path: /
            Method: GET

  SwapperFunction:
    Type: AWS::Serverless::Function
    Properties:
      # I don't like hardcoding names but it is required for cross-region references
      FunctionName: apigw-multiregion-lambda-backend-swap
      Handler: swap.handler
      Runtime: python3.6
      Timeout: 300
      CodeUri:
        Bucket: !Ref Bucket
        Key: !Ref md5
      Environment:
        Variables:
          OtherInfraStackName: !Ref OtherInfraStackName
          OtherPingPongStackName: !Ref OtherPingPongStackName
          MyInfraStackName: !Ref MyInfraStackName
          MyPingPongStackName: !Sub ${AWS::StackName}
          PrimaryUrl: !Ref PrimaryUrl
          StandbyUrl: !Ref StandbyUrl
          TransitionalUrl: !Ref TransitionalUrl
          OtherStackRegion: !Ref OtherStackRegion
      Policies:
        # Needed for the lambda to update cloudformation
        - Statement:
            Effect: Allow
            Action:
                - 'cloudformation:DescribeStacks'
                - 'cloudformation:GetTemplate'
                - 'cloudformation:UpdateStack'
                - 'lambda:GetFunctionConfiguration'
                - 'route53:ListHostedZones'
            Resource: '*'
        - Statement:
            Effect: Allow
            Action:
                - 'apigateway:POST'
            Resource:
                - !Sub 'arn:aws:apigateway:${AWS::Region}::/domainnames/${PrimaryUrl}/basepathmappings'
                - !Sub 'arn:aws:apigateway:${OtherStackRegion}::/domainnames/${PrimaryUrl/basepathmappings'
                - !Sub 'arn:aws:apigateway:${AWS::Region}::/domainnames/${StandbyUrl}/basepathmappings'
                - !Sub 'arn:aws:apigateway:${OtherStackRegion}::/domainnames/${StandbyUrl/basepathmappings'
        - Statement:
                - !Sub 'arn:aws:apigateway:${AWS::Region}::/domainnames/${TransitionalUrl}/basepathmappings'
                - !Sub 'arn:aws:apigateway:${OtherStackRegion}::/domainnames/${TransitionalUrl/basepathmappings'
            Effect: Allow
            Action:
                - 'lambda:InvokeFunction'
            Resource:
                # Too broad, remove wildcard somehow?
                # Just needs permissions to invoke the Custom CFN function in
                # the existing stack
                - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*'
                - !Sub 'arn:aws:lambda:${OtherStackRegion}:${AWS::AccountId}:function:*'

  AlarmSNS:
    Type: AWS::SNS::Topic

  PongerFunctionAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmDescription: Checks for number of pong invokes
      AlarmActions: [ !Ref AlarmSNS ]
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref PongerFunction
      EvaluationPeriods: 1
      MetricName: Invocations
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: breaching
      Unit: Count

  PongerPathMapping:
    Type: "AWS::ApiGateway::BasePathMapping"
    Properties:
      BasePath: ting # careful /ping is a reserved endpoint
      DomainName: !Ref DomainName
      RestApiId: !Ref ServerlessRestApi
      Stage: !Ref ServerlessRestApiProdStage # "Prod"

  PingerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: pinger.handler
      Runtime: python3.6
      Timeout: 1
      CodeUri:
        Bucket: !Ref Bucket
        Key: !Ref md5
      Environment:
        Variables:
          PrimaryUrl: !Ref PrimaryUrl
      Events:
        Cron:
          Type: Schedule
          Properties:
              Schedule: !FindInMap [RegionMap, !Ref 'AWS::Region', cron]
